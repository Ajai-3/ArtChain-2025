version: "3.9"

services:
  redis:
    image: redis:7.0-alpine
    container_name: my-redis-cache
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./infra/redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - backend

  postgres:
    image: postgres:15-alpine
    hostname: postgres-db
    container_name: postgres
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
    ports:
      - "9200:9200"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/ || exit 1"]
      interval: 10s
      retries: 5

  loki:
    image: grafana/loki:2.9.0
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    networks:
      - backend

  grafana:
    image: grafana/grafana:10.0.0
    container_name: grafana
    ports:
      - "3010:3010"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    depends_on:
      - loki
    networks:
      - backend

  api-gateway:
    container_name: api-gateway
    build: ./api-gateway
    env_file:
      - .env
      - ./api-gateway/.env
    ports:
      - "3000:3000"
    depends_on:
      - user-admin-service
    networks:
      - backend

  user-admin-service:
    container_name: user-admin-service
    build: ./services/user-admin-service
    env_file:
      - .env
      - ./services/user-admin-service/.env
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    command: sh -c "npx prisma migrate deploy && npm run dev"

  elastic-search-service:
    container_name: elastic-search-service
    build: ./services/elastic-search-service
    env_file:
      - .env
    ports:
      - "3004:3004"
    depends_on:
      - elasticsearch
    networks:
      - backend

  notification-service:
    container_name: notification-service
    build: ./services/notification-service
    env_file:
      - .env
      - ./services/notification-service/.env
    ports:
      - "3005:3005"
    networks:
      - backend

networks:
  backend:

volumes:
  pg_data:
  redis_data:
  es_data:
  loki_data:
